# Docker Compose for OMS Chat Bot Development
version: '3.8'

services:
  # MongoDB - Document storage and GridFS
  mongodb:
    image: mongo:7.0
    container_name: oms_mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: company_kb
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms_network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: oms_qdrant
    restart: always
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      QDRANT_API_KEY: qdrant-api-key-12345
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: curl -f http://localhost:6333/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms_network

  # ArangoDB Graph Database  
  arangodb:
    image: arangodb:3.11
    container_name: oms_arangodb
    restart: always
    ports:
      - "8529:8529"
    environment:
      ARANGO_ROOT_PASSWORD: arangodbpass123
      ARANGO_STORAGE_ENGINE: rocksdb
    volumes:
      - arangodb_data:/var/lib/arangodb3
      - arangodb_apps:/var/lib/arangodb3-apps
    healthcheck:
      test: curl -f http://localhost:8529/_api/version || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oms_redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oms_network

volumes:
  mongodb_data:
  arangodb_data:
  arangodb_apps:
  qdrant_data:
  redis_data:

networks:
  oms_network:
    driver: bridge

# ========== QUICK START ==========
#
# 1. Start all services:
#    docker-compose up -d
#
# 2. Check service health:
#    docker-compose ps
#
# 3. View logs:
#    docker-compose logs -f mongodb  (or redis, qdrant, arangodb)
#
# 4. Update backend/.env with these connection strings:
#    MONGODB_URI=mongodb://admin:password@localhost:27017/company_kb
#    REDIS_URL=redis://localhost:6379
#    QDRANT_URL=http://localhost:6333
#    QDRANT_API_KEY=qdrant-api-key-12345
#    ARANGODB_URL=http://localhost:8529
#    ARANGODB_USER=root
#    ARANGODB_PASSWORD=arangodbpass123
#
# 5. Stop all services:
#    docker-compose down
#
# 6. Remove all data (WARNING: loses all data):
#    docker-compose down -v
#
# 7. Access admin UIs:
#    - MongoDB: mongosh mongodb://admin:password@localhost:27017
#    - Qdrant:  http://localhost:6333
#    - ArangoDB: http://localhost:8529 (default pass: your_arango_password)
#